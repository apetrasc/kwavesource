% =========================================================================
% 2D k-Wave simulation with a focusing arc transducer
% =========================================================================
clearvars;
close all;

% -------------------------------------------------------------------------
% 1) シミュレーション用グリッドの定義
% -------------------------------------------------------------------------
Nx = 256;               % x方向グリッド数 (行方向)
Ny = 256;               % y方向グリッド数 (列方向)
dx = 0.1e-3;            % グリッド間隔 [m] (0.1 mm)
dy = 0.1e-3;            % グリッド間隔 [m]
kgrid = kWaveGrid(Nx, dx, Ny, dy);
save_path = '/home/matsubara/Scripts/tmp';
% -------------------------------------------------------------------------
% 2) 媒質パラメータ
% -------------------------------------------------------------------------
medium.sound_speed = 1500;     % [m/s]
medium.density     = 1000;     % [kg/m^3]  (水と同程度)
% 減衰を無視するなら:
medium.alpha_coeff = 0;        % dB/(MHz^y cm)
medium.alpha_power = 1.0;
medium.alpha_mode  = 'no_dispersion';
% -------------------------------------------------------------------------
% 3) 円弧形トランスデューサのマスクを作成 (makeArc)
%    ヘルプ: arc = makeArc(grid_size, arc_pos, radius, diameter, focus_pos, ...)
% -------------------------------------------------------------------------
% グリッドサイズ [Nx, Ny] を1つ目の引数に
grid_size  = [Nx, Ny];
source.p_mask = zeros(Nx, Ny);
source.p_mask(50:200, Ny/2) = 1;



% -------------------------------------------------------------------------
% 5) シミュレーション時間配列の作成
%    -> t_end をある程度大きくすると、集束が観察しやすい
% -------------------------------------------------------------------------
t_end = 1e-3;  % シミュレーションを 30マイクロ秒 まで実行 (例)
kgrid.makeTime(medium.sound_speed, [], t_end);

% -------------------------------------------------------------------------
% 6) ソース波形の設定 (正弦波)
% -------------------------------------------------------------------------
source_freq = 4e6;  % 周波数 4 MHz
source_mag  = 1;      % 振幅 [Pa] (相対値でもOK)
%source_signal = source_mag * sin(2 * pi * source_freq * kgrid.t_array);
source_signal = zeros(size(kgrid.t_array));
prf = 3000;                            
T_prf = 1 / prf;   % = 0.000333... s (0.33 ms)
t_array = kgrid.t_array;
% 各パルスのオン時間 [s]
pulse_length = 1e-6;   % 1 μs
max_n = 1000;  % 適宜大きめに取る

for n = 0:max_n
    
    % n回目のパルスが始まる時刻
    t_start = n * T_prf;
    % パルスが終わる時刻
    t_end = t_start + pulse_length;
    
    % もし始まりがシミュレーション時間を超えたら打ち切る
    if t_start > kgrid.t_array(end)
        break;
    end
    
    % t_array の中で [t_start, t_end) に含まれるインデックスを探す
    idx_on = (t_array >= t_start) & (t_array < t_end);
    
    % その区間だけ 4 MHz の正弦波を割り当てる
    % 位相を揃えるなら (t_array - t_start) を使うと、各パルスが同位相になります
    source_signal(idx_on) = sin(2*pi * source_freq * (t_array(idx_on) - t_start));
end
source.p = source_signal;
% -------------------------------------------------------------------------
% 7) センサーの設定
% -------------------------------------------------------------------------
% ここではフォーカス位置より少し下(奥)に1点センサーを置いてみる
sensor.mask = zeros(Nx, Ny);
sensor_x = Nx/2;
sensor_y = Ny/2 + 70;   % arc_posからさらに70グリッド下
sensor.mask(sensor_x, sensor_y) = 1;

% 必要に応じて他の位置にもセンサーを置く、あるいは全領域をマスクにして音場分布を記録してもよい

% センサーが記録する物理量
sensor.record = {'p'};  % 圧力を記録

% -------------------------------------------------------------------------
% 8) シミュレーションのオプション設定
% -------------------------------------------------------------------------
input_args = {
    'DataCast', 'gpuArray-double', ...  % GPUを使う場合 (GPUがあれば)
    'PlotSim', false, ...               % シミュレーション中の描画
    'RecordMovie', true, ...           % シミュレーション動画保存 (要trueなら)
    'MovieName', fullfile(save_path, 'tutorial.avi'), ... % 動画保存するならファイル名指定
};

% -------------------------------------------------------------------------
% 9) シミュレーション実行
% -------------------------------------------------------------------------
sensor_data = kspaceFirstOrder2D(kgrid, medium, source, sensor, input_args{:});

% -------------------------------------------------------------------------
% 10) 結果の可視化 (センサー波形)
% -------------------------------------------------------------------------
figure;
plot(kgrid.t_array*1e6, sensor_data.p(1, :));
xlabel('Time [\mus]');
ylabel('Pressure [Pa]');
title('Pressure at the sensor');
saveas(gcf, '/home/matsubara/Scripts/tmp/sensor.png');
% -------------------------------------------------------------------------
% 11) フィールド全体を可視化したい場合
% -------------------------------------------------------------------------
% センサーを全領域に設定し、sensor.record = {'p_rms'} 等で
% シミュレーション後に arc_mask を可視化すると、焦点付近の強い音圧分布が確認できます。
% 例:
% sensor.mask = ones(Nx, Ny);
% sensor.record = {'p_rms'};
% -> sensor_data.p_rms は [Nx, Ny] のマトリックスとして返ってくる
%
% その場合は:
%   figure;
%   imagesc(sensor_data.p_rms);
%   axis image;
%   colorbar;
%   colormap(getColorMap);
% -------------------------------------------------------------------------
